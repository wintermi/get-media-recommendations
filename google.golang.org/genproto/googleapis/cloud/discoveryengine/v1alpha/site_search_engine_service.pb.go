// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.7
// source: google/cloud/discoveryengine/v1alpha/site_search_engine_service.proto

package discoveryengine

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for
// [SiteSearchEngineService.GetSiteSearchEngine][google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.GetSiteSearchEngine]
// method.
type GetSiteSearchEngineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Resource name of
	// [SiteSearchEngine][google.cloud.discoveryengine.v1alpha.SiteSearchEngine],
	// such as
	// `projects/{project}/locations/{location}/dataStores/{data_store}/siteSearchEngine`.
	//
	// If the caller does not have permission to access the [SiteSearchEngine],
	// regardless of whether or not it exists, a PERMISSION_DENIED error is
	// returned.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSiteSearchEngineRequest) Reset() {
	*x = GetSiteSearchEngineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSiteSearchEngineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteSearchEngineRequest) ProtoMessage() {}

func (x *GetSiteSearchEngineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteSearchEngineRequest.ProtoReflect.Descriptor instead.
func (*GetSiteSearchEngineRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetSiteSearchEngineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for
// [SiteSearchEngineService.CreateTargetSite][google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.CreateTargetSite]
// method.
type CreateTargetSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Parent resource name of
	// [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite], such as
	// `projects/{project}/locations/{location}/dataStores/{data_store}/siteSearchEngine`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite]
	// to create.
	TargetSite *TargetSite `protobuf:"bytes,2,opt,name=target_site,json=targetSite,proto3" json:"target_site,omitempty"`
}

func (x *CreateTargetSiteRequest) Reset() {
	*x = CreateTargetSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTargetSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTargetSiteRequest) ProtoMessage() {}

func (x *CreateTargetSiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTargetSiteRequest.ProtoReflect.Descriptor instead.
func (*CreateTargetSiteRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTargetSiteRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateTargetSiteRequest) GetTargetSite() *TargetSite {
	if x != nil {
		return x.TargetSite
	}
	return nil
}

// Request message for
// [SiteSearchEngineService.GetTargetSite][google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.GetTargetSite]
// method.
type GetTargetSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Full resource name of
	// [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite], such as
	// `projects/{project}/locations/{location}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`.
	//
	// If the caller does not have permission to access the
	// [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite], regardless
	// of whether or not it exists, a PERMISSION_DENIED error is returned.
	//
	// If the requested
	// [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite] does not
	// exist, a NOT_FOUND error is returned.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTargetSiteRequest) Reset() {
	*x = GetTargetSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTargetSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetSiteRequest) ProtoMessage() {}

func (x *GetTargetSiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetSiteRequest.ProtoReflect.Descriptor instead.
func (*GetTargetSiteRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetTargetSiteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for
// [SiteSearchEngineService.UpdateTargetSite][google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.UpdateTargetSite]
// method.
type UpdateTargetSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The target site to update.
	// If the caller does not have permission to update the
	// [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite], regardless
	// of whether or not it exists, a PERMISSION_DENIED error is returned.
	//
	// If the [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite] to
	// update does not exist, a NOT_FOUND error is returned.
	TargetSite *TargetSite `protobuf:"bytes,1,opt,name=target_site,json=targetSite,proto3" json:"target_site,omitempty"`
}

func (x *UpdateTargetSiteRequest) Reset() {
	*x = UpdateTargetSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTargetSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTargetSiteRequest) ProtoMessage() {}

func (x *UpdateTargetSiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTargetSiteRequest.ProtoReflect.Descriptor instead.
func (*UpdateTargetSiteRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateTargetSiteRequest) GetTargetSite() *TargetSite {
	if x != nil {
		return x.TargetSite
	}
	return nil
}

// Request message for
// [SiteSearchEngineService.DeleteTargetSite][google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.DeleteTargetSite]
// method.
type DeleteTargetSiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Full resource name of
	// [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite], such as
	// `projects/{project}/locations/{location}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`.
	//
	// If the caller does not have permission to access the
	// [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite], regardless
	// of whether or not it exists, a PERMISSION_DENIED error is returned.
	//
	// If the requested
	// [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite] does not
	// exist, a NOT_FOUND error is returned.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteTargetSiteRequest) Reset() {
	*x = DeleteTargetSiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTargetSiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTargetSiteRequest) ProtoMessage() {}

func (x *DeleteTargetSiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTargetSiteRequest.ProtoReflect.Descriptor instead.
func (*DeleteTargetSiteRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteTargetSiteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for
// [SiteSearchEngineService.ListTargetSites][google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.ListTargetSites]
// method.
type ListTargetSitesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent site search engine resource name, such as
	// `projects/{project}/locations/{location}/dataStores/{data_store}/siteSearchEngine`.
	//
	// If the caller does not have permission to list
	// [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite]s under this
	// site search engine, regardless of whether or not this branch exists, a
	// PERMISSION_DENIED error is returned.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer items than requested. If
	// unspecified, server will pick an appropriate default. The maximum value is
	// 1000; values above 1000 will be coerced to 1000.
	//
	// If this field is negative, an INVALID_ARGUMENT error is returned.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListTargetSites` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListTargetSites`
	// must match the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListTargetSitesRequest) Reset() {
	*x = ListTargetSitesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTargetSitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTargetSitesRequest) ProtoMessage() {}

func (x *ListTargetSitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTargetSitesRequest.ProtoReflect.Descriptor instead.
func (*ListTargetSitesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListTargetSitesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListTargetSitesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTargetSitesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Response message for
// [SiteSearchEngineService.ListTargetSites][google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.ListTargetSites]
// method.
type ListTargetSitesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of TargetSites.
	TargetSites []*TargetSite `protobuf:"bytes,1,rep,name=target_sites,json=targetSites,proto3" json:"target_sites,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of items matching the request.
	// This will always be populated in the response.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListTargetSitesResponse) Reset() {
	*x = ListTargetSitesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTargetSitesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTargetSitesResponse) ProtoMessage() {}

func (x *ListTargetSitesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTargetSitesResponse.ProtoReflect.Descriptor instead.
func (*ListTargetSitesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListTargetSitesResponse) GetTargetSites() []*TargetSite {
	if x != nil {
		return x.TargetSites
	}
	return nil
}

func (x *ListTargetSitesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListTargetSitesResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

var File_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto protoreflect.FileDescriptor

var file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDesc = []byte{
	0x0a, 0x45, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x31,
	0x0a, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x53, 0x69, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x31, 0x0a, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x69, 0x74, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x22, 0x5d, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x31, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2b, 0x0a, 0x29, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x22, 0x60,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2b, 0x0a,
	0x29, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xa5, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x31, 0x0a, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x69, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb5, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x32, 0x8a, 0x0c, 0x0a, 0x17, 0x53, 0x69, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xe4, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x12, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x69,
	0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x22, 0x53,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x7d, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x81, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x22, 0x7c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x61, 0x22, 0x52, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x7d, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x69, 0x74, 0x65, 0x73, 0x3a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69,
	0x74, 0x65, 0xda, 0x41, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x12, 0xe0, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x12,
	0x52, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x87, 0x02, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x12,
	0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65,
	0x22, 0x81, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6d, 0x32, 0x5e, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x7b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x74, 0x65,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x69, 0x74, 0x65, 0xda, 0x41, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x69, 0x74, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x2a, 0x52, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0xf3, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x12, 0x52, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73,
	0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x7d, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73,
	0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x1a, 0x52, 0xca, 0x41, 0x1e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0xa9, 0x02,
	0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x1c, 0x53, 0x69, 0x74, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x53, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0xa2,
	0x02, 0x0f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x45, 0x4e, 0x47, 0x49, 0x4e,
	0x45, 0xaa, 0x02, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xea,
	0x02, 0x27, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a,
	0x3a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDescOnce sync.Once
	file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDescData = file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDesc
)

func file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDescGZIP() []byte {
	file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDescOnce.Do(func() {
		file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDescData)
	})
	return file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDescData
}

var file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_goTypes = []interface{}{
	(*GetSiteSearchEngineRequest)(nil), // 0: google.cloud.discoveryengine.v1alpha.GetSiteSearchEngineRequest
	(*CreateTargetSiteRequest)(nil),    // 1: google.cloud.discoveryengine.v1alpha.CreateTargetSiteRequest
	(*GetTargetSiteRequest)(nil),       // 2: google.cloud.discoveryengine.v1alpha.GetTargetSiteRequest
	(*UpdateTargetSiteRequest)(nil),    // 3: google.cloud.discoveryengine.v1alpha.UpdateTargetSiteRequest
	(*DeleteTargetSiteRequest)(nil),    // 4: google.cloud.discoveryengine.v1alpha.DeleteTargetSiteRequest
	(*ListTargetSitesRequest)(nil),     // 5: google.cloud.discoveryengine.v1alpha.ListTargetSitesRequest
	(*ListTargetSitesResponse)(nil),    // 6: google.cloud.discoveryengine.v1alpha.ListTargetSitesResponse
	(*TargetSite)(nil),                 // 7: google.cloud.discoveryengine.v1alpha.TargetSite
	(*SiteSearchEngine)(nil),           // 8: google.cloud.discoveryengine.v1alpha.SiteSearchEngine
	(*emptypb.Empty)(nil),              // 9: google.protobuf.Empty
}
var file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_depIdxs = []int32{
	7, // 0: google.cloud.discoveryengine.v1alpha.CreateTargetSiteRequest.target_site:type_name -> google.cloud.discoveryengine.v1alpha.TargetSite
	7, // 1: google.cloud.discoveryengine.v1alpha.UpdateTargetSiteRequest.target_site:type_name -> google.cloud.discoveryengine.v1alpha.TargetSite
	7, // 2: google.cloud.discoveryengine.v1alpha.ListTargetSitesResponse.target_sites:type_name -> google.cloud.discoveryengine.v1alpha.TargetSite
	0, // 3: google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.GetSiteSearchEngine:input_type -> google.cloud.discoveryengine.v1alpha.GetSiteSearchEngineRequest
	1, // 4: google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.CreateTargetSite:input_type -> google.cloud.discoveryengine.v1alpha.CreateTargetSiteRequest
	2, // 5: google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.GetTargetSite:input_type -> google.cloud.discoveryengine.v1alpha.GetTargetSiteRequest
	3, // 6: google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.UpdateTargetSite:input_type -> google.cloud.discoveryengine.v1alpha.UpdateTargetSiteRequest
	4, // 7: google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.DeleteTargetSite:input_type -> google.cloud.discoveryengine.v1alpha.DeleteTargetSiteRequest
	5, // 8: google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.ListTargetSites:input_type -> google.cloud.discoveryengine.v1alpha.ListTargetSitesRequest
	8, // 9: google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.GetSiteSearchEngine:output_type -> google.cloud.discoveryengine.v1alpha.SiteSearchEngine
	7, // 10: google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.CreateTargetSite:output_type -> google.cloud.discoveryengine.v1alpha.TargetSite
	7, // 11: google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.GetTargetSite:output_type -> google.cloud.discoveryengine.v1alpha.TargetSite
	7, // 12: google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.UpdateTargetSite:output_type -> google.cloud.discoveryengine.v1alpha.TargetSite
	9, // 13: google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.DeleteTargetSite:output_type -> google.protobuf.Empty
	6, // 14: google.cloud.discoveryengine.v1alpha.SiteSearchEngineService.ListTargetSites:output_type -> google.cloud.discoveryengine.v1alpha.ListTargetSitesResponse
	9, // [9:15] is the sub-list for method output_type
	3, // [3:9] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_init() }
func file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_init() {
	if File_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto != nil {
		return
	}
	file_google_cloud_discoveryengine_v1alpha_site_search_engine_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiteSearchEngineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTargetSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTargetSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTargetSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTargetSiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTargetSitesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTargetSitesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_depIdxs,
		MessageInfos:      file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_msgTypes,
	}.Build()
	File_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto = out.File
	file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_rawDesc = nil
	file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_goTypes = nil
	file_google_cloud_discoveryengine_v1alpha_site_search_engine_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SiteSearchEngineServiceClient is the client API for SiteSearchEngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SiteSearchEngineServiceClient interface {
	// Gets the
	// [SiteSearchEngine][google.cloud.discoveryengine.v1alpha.SiteSearchEngine].
	GetSiteSearchEngine(ctx context.Context, in *GetSiteSearchEngineRequest, opts ...grpc.CallOption) (*SiteSearchEngine, error)
	// Creates a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	CreateTargetSite(ctx context.Context, in *CreateTargetSiteRequest, opts ...grpc.CallOption) (*TargetSite, error)
	// Gets a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	GetTargetSite(ctx context.Context, in *GetTargetSiteRequest, opts ...grpc.CallOption) (*TargetSite, error)
	// Updates a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	UpdateTargetSite(ctx context.Context, in *UpdateTargetSiteRequest, opts ...grpc.CallOption) (*TargetSite, error)
	// Deletes a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	DeleteTargetSite(ctx context.Context, in *DeleteTargetSiteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets a list of
	// [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite]s.
	ListTargetSites(ctx context.Context, in *ListTargetSitesRequest, opts ...grpc.CallOption) (*ListTargetSitesResponse, error)
}

type siteSearchEngineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSiteSearchEngineServiceClient(cc grpc.ClientConnInterface) SiteSearchEngineServiceClient {
	return &siteSearchEngineServiceClient{cc}
}

func (c *siteSearchEngineServiceClient) GetSiteSearchEngine(ctx context.Context, in *GetSiteSearchEngineRequest, opts ...grpc.CallOption) (*SiteSearchEngine, error) {
	out := new(SiteSearchEngine)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/GetSiteSearchEngine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) CreateTargetSite(ctx context.Context, in *CreateTargetSiteRequest, opts ...grpc.CallOption) (*TargetSite, error) {
	out := new(TargetSite)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/CreateTargetSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) GetTargetSite(ctx context.Context, in *GetTargetSiteRequest, opts ...grpc.CallOption) (*TargetSite, error) {
	out := new(TargetSite)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/GetTargetSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) UpdateTargetSite(ctx context.Context, in *UpdateTargetSiteRequest, opts ...grpc.CallOption) (*TargetSite, error) {
	out := new(TargetSite)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/UpdateTargetSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) DeleteTargetSite(ctx context.Context, in *DeleteTargetSiteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/DeleteTargetSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) ListTargetSites(ctx context.Context, in *ListTargetSitesRequest, opts ...grpc.CallOption) (*ListTargetSitesResponse, error) {
	out := new(ListTargetSitesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/ListTargetSites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiteSearchEngineServiceServer is the server API for SiteSearchEngineService service.
type SiteSearchEngineServiceServer interface {
	// Gets the
	// [SiteSearchEngine][google.cloud.discoveryengine.v1alpha.SiteSearchEngine].
	GetSiteSearchEngine(context.Context, *GetSiteSearchEngineRequest) (*SiteSearchEngine, error)
	// Creates a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	CreateTargetSite(context.Context, *CreateTargetSiteRequest) (*TargetSite, error)
	// Gets a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	GetTargetSite(context.Context, *GetTargetSiteRequest) (*TargetSite, error)
	// Updates a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	UpdateTargetSite(context.Context, *UpdateTargetSiteRequest) (*TargetSite, error)
	// Deletes a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	DeleteTargetSite(context.Context, *DeleteTargetSiteRequest) (*emptypb.Empty, error)
	// Gets a list of
	// [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite]s.
	ListTargetSites(context.Context, *ListTargetSitesRequest) (*ListTargetSitesResponse, error)
}

// UnimplementedSiteSearchEngineServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSiteSearchEngineServiceServer struct {
}

func (*UnimplementedSiteSearchEngineServiceServer) GetSiteSearchEngine(context.Context, *GetSiteSearchEngineRequest) (*SiteSearchEngine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSiteSearchEngine not implemented")
}
func (*UnimplementedSiteSearchEngineServiceServer) CreateTargetSite(context.Context, *CreateTargetSiteRequest) (*TargetSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTargetSite not implemented")
}
func (*UnimplementedSiteSearchEngineServiceServer) GetTargetSite(context.Context, *GetTargetSiteRequest) (*TargetSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetSite not implemented")
}
func (*UnimplementedSiteSearchEngineServiceServer) UpdateTargetSite(context.Context, *UpdateTargetSiteRequest) (*TargetSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTargetSite not implemented")
}
func (*UnimplementedSiteSearchEngineServiceServer) DeleteTargetSite(context.Context, *DeleteTargetSiteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTargetSite not implemented")
}
func (*UnimplementedSiteSearchEngineServiceServer) ListTargetSites(context.Context, *ListTargetSitesRequest) (*ListTargetSitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTargetSites not implemented")
}

func RegisterSiteSearchEngineServiceServer(s *grpc.Server, srv SiteSearchEngineServiceServer) {
	s.RegisterService(&_SiteSearchEngineService_serviceDesc, srv)
}

func _SiteSearchEngineService_GetSiteSearchEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteSearchEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).GetSiteSearchEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/GetSiteSearchEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).GetSiteSearchEngine(ctx, req.(*GetSiteSearchEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_CreateTargetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTargetSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).CreateTargetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/CreateTargetSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).CreateTargetSite(ctx, req.(*CreateTargetSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_GetTargetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).GetTargetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/GetTargetSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).GetTargetSite(ctx, req.(*GetTargetSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_UpdateTargetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTargetSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).UpdateTargetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/UpdateTargetSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).UpdateTargetSite(ctx, req.(*UpdateTargetSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_DeleteTargetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTargetSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).DeleteTargetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/DeleteTargetSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).DeleteTargetSite(ctx, req.(*DeleteTargetSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_ListTargetSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTargetSitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).ListTargetSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/ListTargetSites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).ListTargetSites(ctx, req.(*ListTargetSitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SiteSearchEngineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.discoveryengine.v1alpha.SiteSearchEngineService",
	HandlerType: (*SiteSearchEngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSiteSearchEngine",
			Handler:    _SiteSearchEngineService_GetSiteSearchEngine_Handler,
		},
		{
			MethodName: "CreateTargetSite",
			Handler:    _SiteSearchEngineService_CreateTargetSite_Handler,
		},
		{
			MethodName: "GetTargetSite",
			Handler:    _SiteSearchEngineService_GetTargetSite_Handler,
		},
		{
			MethodName: "UpdateTargetSite",
			Handler:    _SiteSearchEngineService_UpdateTargetSite_Handler,
		},
		{
			MethodName: "DeleteTargetSite",
			Handler:    _SiteSearchEngineService_DeleteTargetSite_Handler,
		},
		{
			MethodName: "ListTargetSites",
			Handler:    _SiteSearchEngineService_ListTargetSites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/discoveryengine/v1alpha/site_search_engine_service.proto",
}
